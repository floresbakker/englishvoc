prefix dcm: <http://purl.org/dc/dcmitype/>
prefix dct: <http://purl.org/dc/terms/>
prefix decl: <https://www.english.org/model/decl/>
prefix foaf: <http://xmlns.com/foaf/0.1/>
prefix owl: <http://www.w3.org/2002/07/owl#>
prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#>
prefix respec: <https://respec.org/model/>
prefix rule: <https://www.english.org/model/rule/>
prefix section: <https://www.english.org/section/>
prefix sh: <http://www.w3.org/ns/shacl#>
prefix shp: <https://www.english.org/model/shp/>
prefix skos: <http://www.w3.org/2004/02/skos/core#>
prefix english: <https://www.english.org/model/def/>
prefix standard: <https://www.english.org/model/>
prefix status: <http://purl.org/adms/status/>
prefix target: <https://www.english.org/model/target/>
prefix vann: <http://purl.org/vocab/vann/>
prefix void: <http://rdfs.org/ns/void#>
prefix xsd: <http://www.w3.org/2001/XMLSchema#>


  english:
    a
      owl:Ontology,
      void:Dataset;
    dct:created '2024-09-29'^^xsd:date;
    dct:creator
      'Flores Bakker',
      'Wouter Beek';
    dct:language 'iso639-1:en';
    dct:license 'http://creativecommons.org/licenses/by/4.0'^^xsd:anyURI;
    dct:publisher <https://rijksfinancien.nl>;
    dct:status status:UnderDevelopment;
    dct:subject 'English'@en;
    dct:title 'English Vocabulary'@en;
    dct:source <https://github.com/floresbakker/englishvoc>;
    
    dct:abstract """ """@en;

    dct:description """ """@en;

    respec:introduction ''' '''@en;

    respec:background ''' '''@en;

    respec:objective ''' '''@en;

    respec:audience ''' '''@en;
    
    foaf:depiction 'https://www.rijksfinancien.nl/themes/custom/indicia_theme/files/logo-rijksoverheid.svg'^^xsd:anyURI;
    foaf:homepage 'https://www.rijksfinancien.nl/'^^xsd:anyURI;
    owl:imports
      dct:,
      owl:,
      rdf:,
      rdfs:,
      skos:;
    sh:declare
      decl:english,
      decl:rdf,
      decl:rdfs,
      decl:xsd;      
    owl:versionInfo '0.1.0';
    vann:preferredNamespacePrefix 'english';
    vann:preferredNamespaceUri 'https://www.english.org/model/def/';
    void:uriRegexPattern '^https://www.english.org/model/def/';
    void:uriSpace 'https://www.english.org/model/def/'^^xsd:anyURI;
    skos:example """

# Example sentence "The big dog runs in the park." modeled in RDF:

example:ExampleSentence
  a english:AbstractSyntaxTree ;
  rdf:_1 example:NounPhrase_1 ;
  rdf:_2 example:VerbPhrase_1 .

example:NounPhrase_1
  a english:NounPhrase ;
  rdf:_1 example:Determiner_1 ;
  rdf:_2 example:TerminalNode_1 ;
  rdf:_3 example:Noun_1 .

example:Determiner_1
  a english:Determiner ;
  english:word "The" .

example:TerminalNode_1
  a english:TerminalNode ;
  english:word "big" .

example:Noun_1
  a english:Noun ;
  english:word "dog" .

example:VerbPhrase_1
  a english:VerbPhrase ;
  rdf:_1 example:Verb_1 ;
  rdf:_2 example:PrepositionalPhrase_1 .

example:Verb_1
  a english:Verb ;
  english:word "runs" .

example:PrepositionalPhrase_1
  a english:PrepositionalPhrase ;
  rdf:_1 example:Preposition_1 ;
  rdf:_2 example:NounPhrase_2 .

example:Preposition_1
  a english:Preposition ;
  english:word "in" .

example:NounPhrase_2
  a english:NounPhrase ;
  rdf:_1 example:Determiner_2 ;
  rdf:_2 example:Noun_2 .

example:Determiner_2
  a english:Determiner ;
  english:word "the" .

example:Noun_2
  a english:Noun ;
  english:word "park" .

 
"""@en.

  decl:english
    sh:prefix "english";
    sh:namespace "https://www.english.org/model/def/"^^xsd:anyURI.

  decl:rdf
    sh:prefix "rdf";
    sh:namespace "http://www.w3.org/1999/02/22-rdf-syntax-ns#"^^xsd:anyURI.

  decl:rdfs
    sh:prefix "rdfs";
    sh:namespace "http://www.w3.org/2000/01/rdf-schema#"^^xsd:anyURI.

  decl:xsd
    sh:prefix "xsd";
    sh:namespace "http://www.w3.org/2001/XMLSchema#"^^xsd:anyURI.

  standard:english
    a dct:Standard;
    dct:created '2024-04-07'^^xsd:date;
    dct:source 'https://www.english.org/'^^xsd:anyURI;
    skos:prefLabel 'English'@en;
    rdfs:isDefinedBy english:. 

### Sections from the English Specification ###
    
### English voc ###

# class: Abstract Syntax Tree for English 

english:AbstractSyntaxTree
  a owl:Class ;
  dct:conformsTo <http://example.org/section/EnglishAbstractSyntaxTree> ;
  skos:definition 'Represents a tree that models an English sentence. It consists of a hierarchy of connected nodes that model the structure and syntax of an English sentence.'@en ;
  skos:prefLabel 'English Abstract Syntax Tree'@en ;
  rdfs:isDefinedBy english: .

# Class: Node

english:Node
  a owl:Class ;
  dct:conformsTo <http://example.org/section/EnglishNode> ;
  skos:definition 'Represents an object within the English abstract syntax tree.'@en ;
  skos:prefLabel 'Node'@en ;
  rdfs:isDefinedBy english: .

# Class: NonTerminalNode

english:NonTerminalNode
  a owl:Class ;
  rdfs:subClassOf english:Node ;
  dct:conformsTo <http://example.org/section/EnglishStructuralNode> ;
  skos:definition 'Represents a structural node in the English abstract syntax tree.'@en ;
  skos:prefLabel 'Non-terminal node'@en ;
  rdfs:isDefinedBy english: .

# Class: TerminalNode

english:TerminalNode
  a owl:Class ;
  rdfs:subClassOf english:Node ;
  dct:conformsTo <http://example.org/section/EnglishTerminalNode> ;
  skos:definition 'Represents a syntactical node in the English abstract syntax tree, i.e., a word or symbol.'@en ;
  skos:prefLabel 'Terminal node'@en ;
  rdfs:isDefinedBy english: .

# Class: Document

english:Document
  a owl:Class ;
  rdfs:subClassOf english:NonTerminalNode ;
  dct:conformsTo <http://example.org/section/Document> ;
  skos:definition 'Represents a document in English.'@en ;
  skos:prefLabel 'Document'@en ;
  rdfs:isDefinedBy english: .

english:Sentence
  a owl:Class ;
  rdfs:subClassOf english:NonTerminalNode ;
  dct:conformsTo <http://example.org/section/Sentence> ;
  skos:definition 'Represents a sentence in English.'@en ;
  skos:prefLabel 'Sentence'@en ;
  rdfs:isDefinedBy english: .

english:Phrase
  a rdfs:Class ;
  rdfs:subClassOf english:NonTerminalNode ;
  dct:conformsTo <http://example.org/section/Phrase> ;
  skos:definition 'Represents a phrase in English.'@en ;
  skos:prefLabel 'Phrase'@en .

english:NounPhrase
  a rdfs:Class ;
  rdfs:subClassOf english:Phrase ;
  dct:conformsTo <http://example.org/section/NounPhrase> ;
  skos:definition 'Represents a noun phrase in English.'@en ;
  skos:prefLabel 'Noun phrase'@en .

english:VerbPhrase
  a rdfs:Class ;
  rdfs:subClassOf english:Phrase ;
  dct:conformsTo <http://example.org/section/VerbPhrase> ;
  skos:definition 'Represents a verb phrase in English.'@en ;
  skos:prefLabel 'Verb phrase'@en .

english:PrepositionalPhrase
  a rdfs:Class ;
  rdfs:subClassOf english:Phrase ;
  dct:conformsTo <http://example.org/section/PrepositionalPhrase> ;
  skos:definition 'Represents a prepositional phrase in English.'@en ;
  skos:prefLabel 'Prepositional phrase'@en .
    
# Additional Terminal and Non-terminal Classes for expanded structure

english:Determiner
  a owl:Class ;
  rdfs:subClassOf english:TerminalNode ;
  skos:definition 'Represents a determiner in English, such as "the", "a", "an".'@en ;
  skos:prefLabel 'Determiner'@en ;
  rdfs:isDefinedBy english: .

english:Noun
  a owl:Class ;
  rdfs:subClassOf english:TerminalNode ;
  skos:definition 'Represents a noun in English, such as "dog", "book", "city".'@en ;
  skos:prefLabel 'Noun'@en ;
  rdfs:isDefinedBy english: .

english:Verb
  a owl:Class ;
  rdfs:subClassOf english:TerminalNode ;
  skos:definition 'Represents a verb in English, such as "runs", "jumps", "is".'@en ;
  skos:prefLabel 'Verb'@en ;
  rdfs:isDefinedBy english: .

english:Preposition
  a owl:Class ;
  rdfs:subClassOf english:TerminalNode ;
  skos:definition 'Represents a preposition in English, such as "in", "on", "under".'@en ;
  skos:prefLabel 'Preposition'@en ;
  rdfs:isDefinedBy english: .



### Shapes ###

shp:NonTerminalNode
    a sh:NodeShape;
    sh:rule rule:NonTerminalNode;
    sh:target target:NonTerminalNode;
    skos:prefLabel 'Non-terminal node shape'@en;
    rdfs:isDefinedBy english:.

target:NonTerminalNode
    a sh:SPARQLTarget;
    rdfs:comment 'Select non-terminal nodes in an English sentence structure that do not have a fragment yet, and whose child nodes all have a fragment.'@en;
    sh:prefixes english:;
    sh:select '''
select $this {

  # Select all non-terminal nodes in the English syntax...
  $this a/rdfs:subClassOf* english:NonTerminalNode.
  
  # ...that do not yet have an English fragment.
  filter not exists { $this english:fragment []. }
  
  # ...but whose child nodes all have an English fragment (both non-terminal child nodes and terminal child nodes)
  minus {
    $this ?member ?child.
    filter not exists { ?child english:fragment []. }
    ?child a/rdfs:subClassOf* english:Node.
  }
}''';
    rdfs:isDefinedBy english:.

rule:NonTerminalNode
    a sh:SPARQLRule;
    rdfs:comment 'Create the English fragment for a non-terminal node in the English sentence structure.'@en;
    skos:prefLabel 'English non-terminal node serialization algorithm'@en;
    sh:prefixes english:;
    sh:construct '''
construct {

  # Assert the new English fragment for this English node
  $this english:fragment ?fragment.
  
} where {
 
  # Get the English fragments of child nodes, if there are any.
  {
    select $this (group_concat(str(?fragment);separator=' ') as ?fragments) {
      {
        select $this ?member ?fragment {
          $this ?member ?node.
          filter(strstarts(str(?member),concat(str(rdf:),'_')))
          ?node english:fragment ?fragment.
        }
        order by xsd:integer(strafter(str(?member),concat(str(rdf:),'_')))
      }
    } group by $this
  }
  # Build the English fragment for this node, by combining everything retrieved above.
  bind(strdt(concat(if(?fragments='','',?fragments)),xsd:string) as ?fragment)
  
}''';
    rdfs:isDefinedBy english:.

shp:SyntaxKeyword
    a sh:NodeShape;
    sh:rule rule:SyntaxKeyword;
    sh:target target:SyntaxKeyword;
    skos:prefLabel 'Syntax Keyword shape'@en;
    rdfs:isDefinedBy english:.

target:SyntaxKeyword
    a sh:SPARQLTarget;
    rdfs:comment ''@en;
    sh:prefixes english:;
    sh:select '''
select $this {

  # Select all keyword nodes in the English grammar...
  $this a/rdfs:subClassOf* english:SyntaxKeyword.
  
  # ...that do not yet have an English fragment.
  filter not exists { $this english:fragment []. }
  
}''';
    rdfs:isDefinedBy english:.

rule:SyntaxKeyword
    a sh:SPARQLRule;
    rdfs:comment ''@en;
    skos:prefLabel ''@en;
    sh:prefixes english:;
    sh:construct '''
construct {

  # Assert the new English fragment for this English node
  $this english:fragment ?fragment.
  
} where {
  
  $this a ?class.
  ?class english:syntax ?syntax.
  
  # Build the English fragment for the keyword.
  bind(strdt(?syntax,xsd:string) as ?fragment)
  
}''';
    rdfs:isDefinedBy english:.      

shp:SyntaxSymbol
    a sh:NodeShape;
    sh:rule rule:SyntaxSymbol;
    sh:target target:SyntaxSymbol;
    skos:prefLabel 'Syntax Symbol shape'@en;
    rdfs:isDefinedBy english:.

target:SyntaxSymbol
    a sh:SPARQLTarget;
    rdfs:comment ''@en;
    sh:prefixes english:;
    sh:select '''
select $this {

  # Select all symbol nodes in the English syntax...
  $this a/rdfs:subClassOf* english:SyntaxSymbol.
  
  # ...that do not yet have an English fragment.
  filter not exists { $this english:fragment []. }
  
}''';
    rdfs:isDefinedBy english:.

rule:SyntaxSymbol
    a sh:SPARQLRule;
    rdfs:comment ''@en;
    skos:prefLabel ''@en;
    sh:prefixes english:;
    sh:construct '''
construct {

  # Assert the new English fragment for this English node
  $this english:fragment ?fragment.
  
} where {
  
  $this a ?class.
  ?class english:syntax ?syntax.
  
  # Build the English fragment for the symbol.
  bind(strdt(?syntax,xsd:string) as ?fragment)
  
}''';
    rdfs:isDefinedBy english:.      

shp:ExpressionPhrase
    a sh:NodeShape;
    sh:rule rule:ExpressionPhrase;
    sh:target target:ExpressionPhrase;
    skos:prefLabel 'ExpressionPhrase shape'@en;
    rdfs:isDefinedBy english:.

target:ExpressionPhrase
    a sh:SPARQLTarget;
    rdfs:comment ''@en;
    sh:prefixes english:;
    sh:select '''
select $this {

  # Select all phrase nodes in the English grammar...
  $this a/rdfs:subClassOf* english:ExpressionPhrase.
  
  # ...that do not yet have an English fragment.
  filter not exists { $this english:fragment []. }
  
  # ...but whose child nodes all have an English fragment.
  minus {
    $this ?member ?child.
    filter not exists { ?child english:fragment []. }
    ?child a/rdfs:subClassOf* english:Node.
  }
}''';
    rdfs:isDefinedBy english:.

rule:ExpressionPhrase
    a sh:SPARQLRule;
    rdfs:comment ''@en;
    skos:prefLabel ''@en;
    sh:prefixes english:;
    sh:construct '''
construct {

  # Assert the new English fragment for this English node
  $this english:fragment ?fragment.
  
} where {
  
  $this rdf:_1 ?word.
  ?word english:fragment ?wordFragment.
  
  OPTIONAL{
  $this rdf:_2 ?adjunct.
  ?adjunct english:fragment ?adjunctFragment.
  }
  
  # Build the English fragment for this phrase, combining word and adjuncts.
  bind(concat(?wordFragment, if(!bound(?adjunctFragment), '', concat(' ',?adjunctFragment))) as ?fragment)
  
}''';
    rdfs:isDefinedBy english:.   

shp:ExpressionConstant
    a sh:NodeShape;
    sh:rule rule:ExpressionConstant;
    sh:target target:ExpressionConstant;
    skos:prefLabel 'ExpressionConstant shape'@en;
    rdfs:isDefinedBy english:.

target:ExpressionConstant
    a sh:SPARQLTarget;
    rdfs:comment ''@en;
    sh:prefixes english:;
    sh:select '''
select $this {

  # Select all character sequence nodes in the English grammar...
  $this a/rdfs:subClassOf* english:ExpressionConstant.
  
  # ...that do not yet have an English fragment.
  filter not exists { $this english:fragment []. }
  
}''';
    rdfs:isDefinedBy english:.

rule:ExpressionConstant
    a sh:SPARQLRule;
    rdfs:comment ''@en;
    skos:prefLabel ''@en;
    sh:prefixes english:;
    sh:construct '''
construct {

  # Assert the new English fragment for this English node
  $this english:fragment ?fragment.
  
} where {
  
  $this rdf:value ?fragment.
  
}''';
    rdfs:isDefinedBy english:.   
